package templates

import (
	"fmt"
	"strconv"
)

templ Document(vars DocumentVars) {
	<!DOCTYPE html>
	<html lang="en" class={ vars.ColorScheme }>
	@head(vars)
	<body>
	<div id="error-popup" style="display: none;"></div>
    <dialog id="share-dialog">
        <div class="dialog-header">
            <h2>Share</h2>
            <button id="share-dialog-close" class="icon-btn dialog-close"></button>
        </div>
        <div class="dialog-body">
            <p>Share this URL with your friends and let them edit or delete the document.</p>
            <h3>Permissions</h3>
            <div class="share-dialog-main">
                <div class="share-dialog-permissions">
                    <label for="share-permissions-write">Write</label>
                    <input id="share-permissions-write" type="checkbox"/>

                    <label for="share-permissions-delete">Delete</label>
                    <input id="share-permissions-delete" type="checkbox"/>

                    <label for="share-permissions-share">Share</label>
                    <input id="share-permissions-share" type="checkbox"/>

                    <label for="share-permissions-webhook">Webhook</label>
                    <input id="share-permissions-webhook" type="checkbox"/>
                </div>
                <button id="share-copy">Copy</button>
            </div>
        </div>
    </dialog>

    <dialog id="documents-dialog">
        <div class="dialog-header">
        	<h2>Documents</h2>
			<button id="documents-dialog-close" class="icon-btn dialog-close"></button>
        </div>
        <div class="dialog-body">
            <ul id="documents-list"></ul>
        </div>
    </dialog>
	@header(vars)
	<main>
		<div id="files">
			for i, file := range vars.Files {
				<input id={ fmt.Sprintf("file-%d", i) } type="radio" name="files" value={ strconv.Itoa(i) }
                    if i == vars.CurrentFile {
                        checked
                    }
                />
                <label for={ fmt.Sprintf("file-%d", i) }><span>{ file.Name }</span><button class="file-remove" disabled?={ !vars.Edit }></button></label>
			}
			<div id="file-add"
				if !vars.Edit {
					style="display: none;"
				}
			></div>
		</div>
		<div id="content">
            <textarea id="code-edit" spellcheck="false" autocomplete="off"
	            if !vars.Edit {
	                style="display: none;"
	            }
            >{ vars.Files[vars.CurrentFile].Content }</textarea>
            <div id="code" class="hl-hl"
                if vars.Edit {
                    style="display: none;"
                }
            ><code id="code-view" class="hl-code">@WriteUnsafe(vars.Files[vars.CurrentFile].Formatted)</code></div>
		</div>
		<div id="footer">
            <select title="Version" id="version" autocomplete="off">
                for _, version := range vars.Versions {
                    <option title={ version.Time } value={ strconv.FormatInt(version.Version, 10) } selected?={ version.Version == vars.Version }>{ version.Label }</option>
                }
            </select>
            <select title="Theme" id="theme" autocomplete="off">
                for _, theme := range vars.Themes {
                    <option value={ theme.Name } data-color-scheme={ theme.ColorScheme } selected?={ vars.Theme == theme.Name }>{ theme.Name }</option>
                }
            </select>
            <label for="folds">
                <input id="folds" type="checkbox" checked?={ vars.Folds }/>
				Folds
            </label>
            <label for="expire"
				if !vars.Edit {
				    style="display: none;"
				}
            >
                <input title="Expire in" id="expire" type="number" min="0" placeholder="expire in"/>h
			</label>
            <div class="spacer"></div>
			<label for="code-edit">
			    <span id="code-edit-count" title="Document Size">{ strconv.Itoa(vars.TotalLength) }</span>
			    if vars.Max > 0 {
			        <span id="code-edit-max" title="Max Size">/{ strconv.FormatInt(vars.Max, 10) }</span>
			    }
			</label>
            <select title="Language" id="language" autocomplete="off">
                <option value="auto" selected?={ vars.Files[vars.CurrentFile].Language == "" }>auto</option>
                for _, language := range vars.Languages {
                    <option value={ language } selected?={ vars.Files[vars.CurrentFile].Language == language }>{ language }</option>
                }
            </select>
        </div>
	</main>
	@WriteUnsafe(vars.StateJSON())
	<script src="/assets/script.js"></script>
	</body>
	</html>
}
